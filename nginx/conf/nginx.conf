daemon off;

worker_processes  2;
error_log logs/error.log info;

events {
    worker_connections 1024;
}

http {

    upstream database {
        postgres_server  127.0.0.1 dbname=reader user=girvine password=coffee11;
    }

        upstream app_server {
                # fail_timeout=0 means we always retry an upstream even if it failed
                # to return a good HTTP response (in case the Unicorn master nukes a
                # single worker for timing out).

                # for UNIX domain socket setups:
                server unix:/tmp/.sock_reader fail_timeout=0;

        }

    server {
        listen 8082;
		root /guyirvine.com/reader/html/reader;

                location /app {
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header Host $http_host;
                        proxy_redirect off;

                        proxy_pass http://app_server;
                }

    location = /checkauth {
            internal;

            postgres_escape   $session $arg_session;

            postgres_pass     database;
            postgres_query    "SELECT user_id FROM session_tbl WHERE key=$session";
            postgres_rewrite  no_rows 403;
            postgres_output   none;
        }

        location /auth {
            internal;
            content_by_lua '
                                if ngx.var.cookie_readersession == nil then
                                        ngx.exit(ngx.HTTP_FORBIDDEN)
                                end

                                res = ngx.location.capture( "/checkauth?session=" .. ngx.var.cookie_readersession )
                                if res.status ~= ngx.HTTP_OK then
                                        ngx.status = ngx.HTTP_FORBIDDEN
                                        ngx.say("login")
                                        ngx.exit(ngx.HTTP_OK)
                                end

                                uid = res.body
            ';
            }

	location /data {
		root /guyirvine.com/reader/html;
        auth_request      /auth;

		default_type text/json;
	}

    location = /markread {
            internal;

            postgres_escape   $entry_id $arg_entry_id;
            postgres_escape   $read $arg_read;

            postgres_pass     database;
            postgres_query    "UPDATE entry_tbl SET read = $read WHERE id = $entry_id";
            postgres_output   none;
        }

	location /read {
        auth_request      /auth;

            content_by_lua '
                file_name = "/tmp/1.txt";
                file = io.open(file_name, "w+");
                file:write( "Bob" );
                file:close();

                local res = ngx.location.capture("/markread?entry_id=" .. ngx.var.arg_id .. "&read=" .. ngx.var.arg_read)
            ';
	}

	location / {
		index  index.html index.htm;
		default_type text/html;
	}

    }
}
